{
  "name": "grunt-include-source",
  "description": "Include your sources into your HTML files automatically.",
  "version": "0.6.1",
  "homepage": "https://github.com/jwvdiermen/grunt-include-source",
  "author": {
    "name": "Jan Willem van Diermen",
    "email": "jwvdiermen@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/jwvdiermen/grunt-include-source.git"
  },
  "bugs": {
    "url": "https://github.com/jwvdiermen/grunt-include-source/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/jwvdiermen/grunt-include-source/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "devDependencies": {
    "grunt": "^0.4.5",
    "grunt-contrib-clean": "^0.6.0",
    "grunt-contrib-jshint": "^0.10.0",
    "grunt-contrib-nodeunit": "^0.4.1",
    "grunt-lineending": "^0.2.3"
  },
  "peerDependencies": {
    "grunt": "^0.4.5"
  },
  "keywords": [
    "gruntplugin"
  ],
  "dependencies": {
    "grunt": "^0.4.5",
    "extendr": "^2.1.0"
  },
  "readme": "# grunt-include-source\r\n\r\n> Include your sources into your HTML files automatically.\r\n\r\n## Getting Started\r\nThis plugin requires Grunt `~0.4.4`\r\n\r\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\r\n\r\n```shell\r\nnpm install --save-dev grunt-include-source\r\n```\r\n\r\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\r\n\r\n```js\r\ngrunt.loadNpmTasks('grunt-include-source');\r\n```\r\n\r\n## The \"includeSource\" task\r\n\r\n### Overview\r\nIn your project's Gruntfile, add a section named `includeSource` to the data object passed into `grunt.initConfig()`.\r\n\r\n```js\r\ngrunt.initConfig({\r\n  includeSource: {\r\n    options: {\r\n      // Task-specific options go here.\r\n    },\r\n    your_target: {\r\n      // Target-specific file lists and/or options go here.\r\n    },\r\n  },\r\n})\r\n```\r\n\r\n### Options\r\n\r\n#### options.basePath\r\nType: `String` or `Array[String]`\r\nDefault value: `''`\r\n\r\nThe base path to use when expanding files. \r\nCan be an array to support expanding files from multiple paths.\r\n\r\n#### options.baseUrl\r\nType: `String`\r\nDefault value: `''`\r\n\r\nThe base URL to use for included files in the final result.\r\nFor example, setting `baseUrl` to `public/` will result in files being included from `public/path/to/your/file`.\r\n\r\n#### options.templates\r\nType: `Object`\r\n\r\nThe templates for sources included in `html`, `haml`, `jade`, `scss`, `less`, `ts` files. Definition of single template overrides its default equivalent only.\r\n\r\nExample:\r\n```js\r\nincludeSource: {\r\n  options: {\r\n    basePath: 'app',\r\n    baseUrl: 'public/',\r\n    templates: {\r\n      html: {\r\n        js: '<script src=\"{filePath}\"></script>',\r\n        css: '<link rel=\"stylesheet\" type=\"text/css\" href=\"{filePath}\" />',\r\n      },\r\n      haml: {\r\n        js: '%script{src: \"{filePath}\"}/',\r\n        css: '%link{href: \"{filePath}\", rel: \"stylesheet\"}/'\r\n      },      \r\n      jade: {\r\n        js: 'script(src=\"{filePath}\", type=\"text/javascript\")',    \r\n        css: 'link(href=\"{filePath}\", rel=\"stylesheet\", type=\"text/css\")'\r\n      },\r\n      scss: {\r\n        scss: '@import \"{filePath}\";',\r\n        css: '@import \"{filePath}\";',\r\n      },\r\n      less: {\r\n        less: '@import \"{filePath}\";',\r\n        css: '@import \"{filePath}\";',\r\n      },\r\n      ts: {\r\n        ts: '/// <reference path=\"{filePath}\" />'\r\n      }\r\n    }\r\n  },\r\n  myTarget: {\r\n    files: {\r\n      'dist/index.html': 'app/index.tpl.html'\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nAs it was mentioned above, it is possible to override only necessary templates. \r\n\r\n#### options.typeMappings\r\nType: `Object`\r\n\r\nMap types that are not supported but have the same syntax as an existing type. For example:\r\n```js\r\n\r\nincludeSource: {\r\n  options: {\r\n    typeMappings: {\r\n      // CSHTML files uses the same syntax as HTML files.\r\n      'cshtml': 'html',\r\n      // LESS files use the same syntax as SCSS files.\r\n      'less': 'scss'\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n#### options.rename\r\nType: `function`\r\n\r\nA way of returning a custom filepath.\r\n\r\nSee [grunt.file.expandMapping](http://gruntjs.com/api/grunt.file#grunt.file.expandmapping).\r\nIf specified, this function will be responsible for returning the final dest filepath. By default, it joins dest and matchedSrcPath like so:\r\n```js\r\n  rename: function(dest, matchedSrcPath, options) {\r\n    return path.join(dest, matchedSrcPath);\r\n  }\r\n ```\r\n\r\n#### options.flatten\r\nType: `Boolean`\r\nDefault value: `false`\r\n\r\nRemove the path component from all matched src files. The src file path is still joined to the specified dest.\r\n\r\n[grunt.file.expandMapping.flatten](http://gruntjs.com/api/grunt.file#grunt.file.expandmapping).\r\n\r\n### Include syntax\r\nCurrently supported: `html`, `haml`, `jade`, `scss`, `less` and `ts` (TypeScript).\r\n\r\n#### HTML and CSHTML syntax\r\n`<!-- include: options_go_here_as_json -->`\r\n\r\n#### SCSS and LESS syntax\r\n`// include: options_go_here_as_json`\r\n\r\n#### TS syntax\r\n`/// <!-- include: options_go_here_as_json -->`\r\n\r\n#### include.type\r\nThe type of files that are being included.\r\nNecessary for choosing the template for output. See `options.templates` for currently supported types.\r\nSupported types are dependend on the file type you include them from.\r\n\r\n#### include.bower\r\n**DEPRECATED**: Use another Grunt plugin which is better suited for this usecase, like [grunt-bower-install](https://github.com/stephenplusplus/grunt-bower-install).\r\nThis plugin doesn't support the `main` property for example and is mainly used for development purposes to directly include external sources.\r\n\r\nInclude files of the specified Bower component. The component should have a `bower.json` meta data with a property called `sources`.\r\nThis property should contain the files grouped by type, which are passed through the `grunt.file.expand` method.\r\n\r\nExample:\r\n```js\r\n{\r\n  \"name\": \"package.name\",\r\n  ...\r\n  \"sources\": {\r\n    \"js\": [\r\n      \"src/scripts/**/*.js\",\r\n      \"lib/compiled-templates.js\"\r\n    ],\r\n    \"css\": \"src/styles/**/*.css\"\r\n  }\r\n}\r\n```\r\n\r\n#### include.files\r\nInclude the given files. Files are passed through the `grunt.file.expandMapping` method (see `include.rename` and `include.flatten` options).\r\n\r\n#### include.basePath\r\nSet to override the `basePath` set in the options.\r\n\r\n#### include.baseUrl\r\nSet to override the `baseUrl` set in the options.\r\n\r\n#### include.ordering\r\nType: `String`\r\nDefault value: `undefined`\r\n\r\nOrdering method to be used when including files. Currently supported methods are:\r\n* `undefined` (default) - included files are sorted by their paths alphabetically in ascending order.\r\n* `'top-down'` - files from the parent directory will be included before files from subdirectories.\r\n\r\n#### Overwriting files\r\n\r\nTo set the source file as the destination file use an `/include` comment:\r\n\r\n```html\r\n<!-- include: \"type\": \"js\", \"files\": \"js/**/*.js\" -->\r\n<script type=\"text/javascript\" src=\"js/_first.js\"></script>\r\n<script type=\"text/javascript\" src=\"js/lib/dep1.js\"></script>\r\n<!-- /include -->\r\n```\r\n  \r\nWhen includeSource is run it will keep the include comments and only update the includes inside it.\r\n\r\nThis works the same way for Less/Sass, by using `// /include`.\r\n\r\n### Usage Examples\r\nConfigure your task like this:\r\n\r\n```js\r\ngrunt.initConfig({\r\n  includeSource: {\r\n    options: {\r\n      basePath: 'app',\r\n      baseUrl: 'public/'\r\n    },\r\n    myTarget: {\r\n      files: {\r\n        'dist/index.html': 'app/index.tpl.html'\r\n      }\r\n    }\r\n  }\r\n})\r\n```\r\n\r\nThe file `index.tpl.html` could contain, for example:\r\n```html\r\n<!doctype html>\r\n<html>\r\n  <head>\r\n    <meta charset=\"utf-8\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\r\n    <title>Index</title>\r\n    <meta name=\"description\" content=\"\">\r\n    <meta name=\"viewport\" content=\"width=device-width\">\r\n\r\n    <!-- \r\n      Automatically include Bower components. Use the \"sources\" object in your bower.json\r\n      to specify which source files are which.\r\n    -->\r\n    <!-- include: \"type\": \"css\", \"bower\": \"yourComponent\" -->\r\n\r\n    <!--\r\n      Include CSS files from a \"tmp\" directory, put there by another task.\r\n      This shows how to override the default \"basePath\" set in the options.\r\n    -->\r\n    <!-- include: \"type\": \"css\", \"basePath\": \"tmp\", \"files\": \"styles/**/*.css\" -->\r\n  </head>\r\n  <body>\r\n    <!-- include: \"type\": \"js\", \"bower\": \"yourComponent\" -->\r\n    <!-- include: \"type\": \"js\", \"files\": \"scripts/**/*.js\" -->\r\n  </body>\r\n</html>\r\n```\r\nAnd the resulting file `index.html` will look something like:\r\n```html\r\n<!doctype html>\r\n<html>\r\n  <head>\r\n    <meta charset=\"utf-8\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\r\n    <title>Index</title>\r\n    <meta name=\"description\" content=\"\">\r\n    <meta name=\"viewport\" content=\"width=device-width\">\r\n\r\n    <!-- \r\n      Automatically include Bower components. Use the \"sources\" object in your bower.json\r\n      to specify which source files are which.\r\n    -->\r\n    <!-- include: \"type\": \"css\", \"bower\": \"yourComponent\" -->\r\n        \r\n    <!--\r\n      Include CSS files from a \"tmp\" directory, put there by another task.\r\n      This shows how to override the default \"basePath\" set in the options.\r\n    -->\r\n    <link href=\"public/styles/main.css\" rel=\"stylesheet\" type=\"text/css\" />\r\n    <link href=\"public/styles/anotherFile.css\" rel=\"stylesheet\" type=\"text/css\" />\r\n  </head>\r\n  <body>\r\n    <script src=\"public/bower_components/yourComponent/main.js\"></script>\r\n    <script src=\"public/scripts/app.js\"></script>\r\n    <script src=\"public/scripts/anotherFile.js\"></script>\r\n    <script src=\"public/scripts/controllers/evenMore.js\"></script>\r\n  </body>\r\n</html>\r\n```\r\n\r\n## Contributing\r\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\r\n\r\n## Release History\r\nSee [CHANGELOG.md](https://github.com/jwvdiermen/grunt-include-source/blob/master/CHANGELOG.md).\r\n",
  "readmeFilename": "README.md",
  "_id": "grunt-include-source@0.6.1",
  "dist": {
    "shasum": "9b2bc3525f6a3d08f3624f40b3db0de50786c102"
  },
  "_from": "grunt-include-source@~0.6.1",
  "_resolved": "https://registry.npmjs.org/grunt-include-source/-/grunt-include-source-0.6.1.tgz"
}
